pipeline {
    agent any
    tools { maven  'maven_3.8' }
    stages {
        stage('Git checkout') {
            steps {
                checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/feauture/theodoreatabe']], extensions: [], userRemoteConfigs: [[credentialsId: 'jenkins-pw-credential', url: 'https://github.com/IBT-learning/ibt-maven.git']])
            }
        }
        stage ('validate'){
            steps {
               sh 'mvn validate'
            }
        }
         stage ('compile'){
                     steps {
                        sh 'mvn compile'
                     }
                 }
                 stage('SonarQube Analysis') {
                   environment {
                             sonarScan = tool 'ibt-sonarqube'
                         }
                   steps {
                     withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                       sh "${env.sonarScan}/bin/sonar-scanner"
                              }
                             }
                            }
                           stage ('test'){
                            steps {
                               sh 'mvn test'
                            }
                        }
            stage ('package'){
                                        steps {
                                           sh 'mvn package'
                                        }
                                    }
             stage('Vulnerability scan - Dependency check'){
                 steps {
                            echo "dynamic scan"
                     }
             }
             stage('Upload to Artifactory(secret file)'){
                 steps {
                     withCredentials([file(credentialsId: 'mvn-settings-theodore4G', variable: 'maven_settings_theodore4G')]) {
                         sh 'mvn deploy -s $maven_settings_theodore4G'
                     }
                     withCredentials([usernamePassword(credentialsId: 'jenkins-pw-credential', passwordVariable: 'art_password', usernameVariable: 'art_name')]) {
                         sh 'echo $art_name $art_password'
                     }
                 }
             }
             stage('Upload to Artifactory (config-file)'){
                 steps{
                     configFileProvider([configFile(fileId: 'artifactory-settings', variable: 'maven_settings_artifactory')]) {
                        sh 'mvn deploy -s $maven_settings_artifactory'
                     }
                 }
             }
             stage('Deploy to Dev')
              when {
                  expression{
                      enn.BRANCH_NAME == 'main'
                      }
                  }
              {
              steps{
                   script{
                      def remote = [name: 'dev-server',host: '165.22.6.110', allowAnyHosts: true]
                      withCredentials([usernamePassword(credentialsId: 'server-ssh-pwd', passwordVariable: 'password', usernameVariable: 'username')]) {
                         remote.user = username
                         remote.password = password
                         sshPut remote: remote, from: 'target/ibt-maven-1.2-SNAPSHOT.jar' , into: '/opt/tomcat/apps'

                      }
                 }
              }
            }
         }
    }