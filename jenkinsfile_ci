pipeline{
    agent any
  stages {
    stage('Git checkout') {
                steps {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/feature_tokaf']], extensions: [], userRemoteConfigs: [[credentialsId: 'ibt', url: 'https://github.com/IBT-learning/ibt-maven.git']]]
                }
            }
    stage('Validate'){
        steps{
            withMaven(maven: 'maven_3.8') {
                sh "mvn validate"
            }
        }
    }
    stage('Compile'){
             steps{
                 withMaven(maven: 'maven_3.8') {
                   sh "mvn compile"
                 }
             }
          }
    stage('Run tests'){
             steps{
                 withMaven(maven: 'maven_3.8') {
                     sh "mvn test"
                 }
             }
          }
    stage('SonarQube Analysis') {
                environment{
                 sonarScan = tool 'ibt-sonarqube'
             }
             steps{
                    withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
                      sh "${env.sonarScan}/bin/sonar-scanner"
                              }
                          }
                 }
    stage('package'){
                  steps{
                      withMaven(maven: 'maven_3.8') {
                          sh "mvn package"
                      }
                  }
             }
    stage('Vulnerability scan - Dependency Check')
         {
                 steps{
                                         dependencyCheck additionalArguments: '''
                                                                               -o "./"
                                                                               -s "./"
                                                                               -f "ALL"
                                                                               --prettyPrint ''', odcInstallation: 'dependency-check'
                                           dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                 }
         }
    stage('upload to Artifactory') {
                 steps{
             withCredentials([file(credentialsId: 'mvn-settings-artifactory-UO', variable: 'mvn_settings')]) {
                   withMaven(maven: 'maven_3.8') {
                                           sh 'mvn deploy -s $mvn_settings'
                                           }
       }
       }
                   }
    stage('Deploy to Dev'){
                  steps{
                            script{
                                def remote = [name: 'dev-server', host: '147.182.143.169', allowAnyHosts: true]
                                withCredentials([usernamePassword(credentialsId: 'server-ssh-pw', passwordVariable: 'password', usernameVariable: 'username')]) {
                                    remote.user = username
                                    remote.password = password
                                    sshPut remote: remote, from: 'target/ibt-maven-3.0-SNAPSHOT.jar', into: '/opt/tomcat/apps'
              }
              }
                           }
        }
      stage ('Build'){
         steps {
            echo "Build approval"
         }
      }
    stage ('Get Approval') {
       steps {
         input "Please approve this deployment"
                 }
    }
    stage('Deploy') {
      steps {
      echo "Deploying to Prod"
      }
    }
    }
    }




