pipeline{
    agent any
    parameters {
              string(name: 'BranchName', defaultValue: 'main', description: 'Input the Branch name to Build')
              choice(name: 'Choice', choices: ['One', 'Two', 'Three'], description: 'Make a selection')
    }
    stages{

    stage('Git checkout'){
        steps{
            echo "git checkout"
            git branch: 'feature-pumej', changelog: false, credentialsId: 'pumejgitpsswd', poll: false, url: 'https://github.com/Mexxy-lab/mexy_maven.git'
        }
    }
    stage('Test'){
        steps{
            withMaven(maven: 'maven_3.8') {
                sh 'mvn test'
            }
        }
    }
    stage('Validate'){
        steps{
            withMaven(maven: 'maven_3.8') {
                sh 'mvn validate'
                }
           }
        }
    stage('Compile'){
         steps{
             withMaven(maven: 'maven_3.8') {
                 sh 'mvn compile'
                 }
             }
         }
    stage ('Sonarqube Analysis') {
     	    environment {
     		sonarScan = tool 'ibt-sonarqube'
            }
            steps {
     	        withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
     	        //sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=July_cohort"
     	        sh "${env.sonarScan}/bin/sonar-scanner"
     		    }
     	    }
    }
    stage('Package'){
          steps{
              withMaven(maven: 'maven_3.8') {
                    sh 'mvn package'
                   }
              }
          }
    stage ('Vulnerability scan - Dependency Check') {

        	steps {
        		dependencyCheck additionalArguments: '''
        					-0 "./"
        					-s "./"
        					-f "All"
        					--prettyPrint ''', odcInstallation: 'dependency-check'
        		dependencyCheckPublisher pattern: 'dependency-check-report.xml'
        	}
    }
    stage('Deploy'){
           steps{
                withMaven(maven: 'maven_3.8') {
                    withCredentials([file(credentialsId: 'settingsxml_pumej', variable: 'settingsxml_pumej')]) {
                        sh 'mvn deploy -s $settingsxml_pumej'
                        }
                    }
                }
           }
    stage('Deploy with Config file'){
           steps{
                withMaven(maven: 'maven_3.8') {
                    configFileProvider([configFile(fileId: 'artifactory-settings', variable: 'settingsxml_managed')]) {
                        sh 'mvn deploy -s $settingsxml_managed'
                        }
                    }
                }
           }
    }
     post {
          always {
                   echo 'This is the end of the PIPELINE!!! PROJECT WAS SUCCESSFUL'
                   echo 'This was Deployed successfully'
          }
    }
}