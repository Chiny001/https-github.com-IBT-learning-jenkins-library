pipeline {
agent any
tools { maven 'maven_3.8' }
stages {
    stage('Git checkout'){
     steps{
        checkout scmGit(branches: [[name: '*/feature-gunj']], extensions: [], userRemoteConfigs: [[credentialsId: 'ibt', url: 'https://github.com/IBT-learning/ibt-maven.git']])
     }
    }
    stage('Validate'){
        steps{
            sh 'mvn validate'
        }
    }
     stage('Compile'){
            steps{
                sh 'mvn compile'
            }
        }
       stage('Test'){
                  steps{
                      sh 'mvn test'
                  }
              }
            stage('SonarQube Analysis') {
                environment{
                    sonarScan = tool 'ibt-sonarqube'
                }
                steps{
                withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
                  sh "${env.sonarScan}/bin/sonar-scanner"
                }
               }
              }
        stage('Package'){
            steps{
                withMaven(maven: 'maven_3.9.3') {
                    sh 'mvn package'
                }
            }
        }
       stage('Vulnerability Scan - Dependency Check'){
            steps{
                   dependencyCheck additionalArguments: '''
                        -o "./"
                        -s "./"
                        -f "ALL"
                        --prettyPrint ''' , odcInstallation: 'dependency-check'
                   dependencyCheckPublisher pattern: 'dependency-check-report.xml', stopBuild: true, unstableTotalCritical: 0, unstableTotalHigh: 2, unstableTotalLow: 5, unstableTotalMedium: 3
            }
       }
        stage('Deploy'){
            steps{
                withCredentials([file(credentialsId: 'gunj_artifactory_settings', variable: 'artifactory_settings')]) {
                    sh 'mvn deploy -s $artifactory_settings'
                }
            }
        }
        stage('Deploy (confilFile)'){
            steps{
                configFileProvider([configFile(fileId: 'artifactory-settings', variable: 'mvn_settings_config')]) {
                    sh 'mvn deploy -s $mvn_settings_config'
                }
                withMaven(maven: 'maven_3.9.3', mavenSettingsConfig: 'artifactory-settings') {
                   sh 'mvn deploy'
                }
            }
        }
        stage('Deploy to DevServer'){
            steps{
                script{
                    def remote =[name: 'Dev', host: '147.182.150.238', allowAnyHosts: true]
                    withCredentials([usernamePassword(credentialsId: 'digital-ocean-vm-pw', passwordVariable: 'password', usernameVariable: 'username')]) {
                        remote.user = username
                        remote.password = password
                        sshPut remote , from: 'target/ibt-maven-1.9-SNAPSHOT.jar', into: '/op/tomcat/apps'
                    }
                }
            }

        }
   }
}