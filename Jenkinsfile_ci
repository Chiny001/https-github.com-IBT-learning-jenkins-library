pipeline {
    agent any
    tools { maven  'maven_3.8' }
    stages {
        stage('Git checkout') {
            steps {
                checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/feature/gunjan']], extensions: [], userRemoteConfigs: [[credentialsId: 'ibt', url: 'https://github.com/IBT-learning/ibt-maven.git']])
            }
        }
        stage ('Validate'){
            steps {
               sh 'mvn validate'
            }
        }
         stage ('Compile'){
            steps {
                sh 'mvn compile'
                }
           }
           stage('SonarQube Analysis') {
             environment {
                       sonarScan = tool 'ibt-sonarqube'
                   }
               withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube')) {
                 sh "${env.sonarScan}/bin/sonar-scanner"
               }
             }
           stage ('Test'){
            steps {
                    sh 'mvn test'
                 }
                }
           stage ('Package'){
                steps {
                    sh 'mvn package'
                }
               }
            stage('Upload to Artifactory(secret-file)'){
                steps {
                   withCredentials([file(credentialsId: 'mvn_settings_gunjan', variable: 'maven_settings_gunjan')]) {
                       sh 'mvn deploy -s $maven_settings_gunjan'
                   }
                    withCredentials([usernamePassword(credentialsId: 'ibt', passwordVariable: 'art_password', usernameVariable: 'art_name')]) {
                        sh 'echo $art_name $art_password'
                    }
                }
            }
            stage('Upload to Artifactory (config-file)'){
                steps {
                    configFileProvider([configFile(fileId: 'artifactory-settings', variable: 'maven_settings_artifactory')]) {
                        sh 'mvn deploy -s $maven_settings_artifactory'
                    }
                }
            }
    }
}