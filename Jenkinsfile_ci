pipeline{
agent any

stages {
    stage ('Git Checkout') {
        steps{
            checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/feature_belirta']], extensions: [], userRemoteConfigs: [[credentialsId: 'beli-git', url: 'https://github.com/IBT-learning/ibt-maven.git']])
        }
    }
    stage ('validate'){
        steps{
            withMaven(maven: 'maven_3.8') {
                sh 'mvn validate'
            }
        }
    }
    stage ('compile'){
        steps{
             withMaven(maven: 'maven_3.8') {
                     sh 'mvn compile'
             }
        }
    }
    stage ('run test'){
        steps{
            withMaven(maven: 'maven_3.8') {
                sh 'mvn test'
            }
        }
    }
    stage('SonarQube Analysis') {
    environment{
     sonarScan = tool 'ibt-sonarqube'
    }
    steps{
       withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
         sh "${env.sonarScan}/bin/sonar-scanner"
         }
       }
    }
    stage ('package'){
            steps{
                withMaven(maven: 'maven_3.8') {
                    sh 'mvn package'
                }
            }
        }
     stage('Vulnerability scan - Dependency Check')
                     {
                          steps{
                                   dependencyCheck additionalArguments: '''
                                                                         -o "./"
                                                                         -s "./"
                                                                         -f "ALL"
                                                                         --prettyPrint ''', odcInstallation: 'dependency-check'
                                     dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                          }
                     }
                  stage('upload to Artifactory'){
                      steps{
                          withCredentials([file(credentialsId: 'mvn-settings-artifactory-feb', variable: 'mvn_settings')]) {
                             withMaven(maven: 'maven_3.8') {
                                  sh 'mvn deploy -s $mvn_settings'
                             }
                          }
                      }
                  }
                  stage('upload to Artifactory-configFile '){
                      steps{
                          configFileProvider([configFile(fileId: 'jfrog-mvn-settings', targetLocation: 'mvn_settings_config', variable: 'mvn_settings_config')]) {
                               withMaven(maven: 'maven_3.8') {
                                        sh 'mvn deploy -s $mvn_settings_config'
                               }
                          }
                      }
                  }
                  stage('Deploy to Dev'){
                      steps{
                          script{
                              def remote = [name: 'dev-server', host: '147.182.220.26', allowAnyHosts: true]
                              withCredentials([usernamePassword(credentialsId: 'server-ssh', passwordVariable: 'password', usernameVariable: 'username')]) {
                                remote.user = username
                                remote.password = password
                                sshPut remote: remote, from: 'target/ibt-maven-2.5-SNAPSHOT.jar', into: '/opt/tomcat/apps'
                              }
                          }
                      }
                  }


  }
}
