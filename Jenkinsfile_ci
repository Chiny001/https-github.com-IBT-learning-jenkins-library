pipeline {
agent any

stages {
    stage ('Git checkout') {
        steps{
           checkout scmGit(branches: [[name: '*/feature-nicole']], extensions: [], userRemoteConfigs: [[credentialsId: 'Ibt-local-jenk', url: 'https://github.com/IBT-learning/ibt-maven.git']])
        }
    }
    stage ('validate'){
        steps{
            withMaven(maven: 'Maven_3.8') {
                bat 'mvn validate'
            }
        }
    }
    stage ('compile'){
        steps{
            withMaven(maven: 'Maven_3.8') {
                bat 'mvn compile'
            }
        }
    }
    stage ('Run Test'){
            steps{
                withMaven(maven: 'Maven_3.8') {
                    bat 'mvn test'
                }
            }
        }
     stage('SonarQube Analysis') {
     environment {
        sonarScan = tool 'ibt-sonarqube'
     }
        steps{
            withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                   bat "${env.sonarScan}/bin/sonar-scanner"
            }
         }
       }
     stage ('Package'){
                 steps{
                    withMaven(maven: 'Maven_3.8') {
                         bat 'mvn package'
                    }
                 }
             }
     stage('Vulnerability scan - Dependency Check')
        {
            steps{
                    dependencyCheck additionalArguments: '''
                                                          -o "./"
                                                          -s "./"
                                                          -f "ALL"
                                                          --prettyPrint ''', odcInstallation: 'dependency-check'
                          dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        stage('upload to Artifactory'){
            steps{
                withCredentials([file(credentialsId: 'mvn-settings-artifactory-feb', variable: 'mvn_settings')]) {
                           withMaven(maven: 'Maven_3.8') {
                                             bat 'mvn deploy -s $mvn_settings'
                                         }
                           }
                    }
                }
                stage('upload to Artifactory - configFile'){
                    steps{
                        configFileProvider([configFile(fileId: 'jfrog-mvn-settings', targetLocation: 'mvn_settings_config', variable: 'mvn_settings_config')]) {
                            withMaven(maven: 'Maven_3.8') {
                                  bat 'mvn deploy -s $mvn_settings_config'
                            }
                        }
                    }
                }
    }
}