pipeline {
    agent any

    stages{
    stage('Git checkout') {
    steps{
        git branch: 'feature_makeda', changelog: false, credentialsId: 'GitHub_user_cred_makeda', poll: false, url: 'https://github.com/IBT-learning/ibt-maven.git'
    }
  }
  stage('Validate') {
     steps{
        withMaven(maven: 'maven_3.8') {
          sh 'mvn validate'
        }
     }
  }
  stage('Compile') {
     steps{
         withMaven(maven: 'maven_3.8') {
                   sh 'mvn compile'
     }
  }
}
  stage('Test') {
     steps{
        withMaven(maven: 'maven_3.8') {
                  sh 'mvn test'
     }
    }
  }
  stage('SonarQube Analysis') {
     environment{
         sonarScan = tool 'ibt-sonarqube_4.8'
     }
     steps{
         withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
            // sh "${env.sonarScan}/bin/sonar-scanner"
          }
     }
  }
   stage('Package') {
       steps{
          withMaven(maven: 'maven_3.8') {
                    sh 'mvn package'
       }
      }
    }
    stage('Dynamic Scan'){
       steps{
           dependencyCheck additionalArguments: '''
                  -o "./"
                  -s "./"
                  -f "ALL"
                  --prettyPrint ''', odcInstallation: 'dependency-check'
               dependencyCheckPublisher pattern: 'dependency-check-report.xml'
       }

    }
    stage('Upload to Artifactory') {
       steps{
           withMaven(maven: 'maven_3.8') {
             withCredentials([file(credentialsId: 'mvn_settings_makeda', variable: 'mvn_settings_makeda')]) {
                 sh 'mvn deploy -s $mvn_settings_makeda'
             }
       }
    }
   }
     stage('Upload to Artifactory (configFile)'){
        steps{
            withMaven(maven: 'maven_3.8') {
              configFileProvider([configFile(fileId: 'artifactory-settings', targetLocation: 'mvn_settings_managed', variable: 'mvn_settings_managed')]) {
                  sh 'mvn deploy -s $mvn_settings_managed'
              }
        }
     }
   }
      stage('Deploy to Dev'){
         steps{
             script{
                 def remote = [name: 'Dev' , host: '142.93.144.77', allowAnyHosts: true]
                 withCredentials([usernamePassword(credentialsId: 'server-ssh-pw', passwordVariable: 'password', usernameVariable: 'username')]) {
                     remote.user = username
                     remote.password = password
                  sshPut remote: remote, from: 'target/ibt-maven-1.4-SNAPSHOT.jar', into: '/opt/tomcat/apps'
                 }
             }
         }
      }
   }
 }