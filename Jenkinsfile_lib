@Library('jenkins-library')_

pipeline{
    agent any

    stages{
    stage('Git checkout'){
        steps{
            git branch: 'feature_abreham', credentialsId: 'mvn_user_credential_github', url: 'https://github.com/IBT-learning/ibt-maven.git'
          }
        }
        stage('validate'){
            steps{
            withMaven(maven: 'maven_3.9.3') {
                sh 'mvn validate'
                }
            }
        }
        stage('compile'){
                    steps{
                    withMaven(maven: 'maven_3.9.3') {
                        sh 'mvn compile'
                        }
                    }
                }
                stage('test'){
                       steps{
                            withMaven(maven: 'maven_3.9.3') {
                                  sh 'mvn test'
                                  }
                           }
                      }

                     // stage('SonarQube Analysis'){
                        //    steps{
                           //     IBT_sonarQube
                             //   withSonarQubeEnv(credentialsId: 'SQ-student', installationName: ' IBT_sonarQube') {
                                 //   sh '${env.sonarScan}/bin/sonar-scanner'
                             //   }
                           // }
                    //  }
                      stage('package'){
                            steps{
                                 withMaven(maven: 'maven_3.9.3') {
                                         sh 'mvn package'
                                         }
                                 }
                           }
                      stage('Dynamic Scan'){
                        steps {
                            DependencyCheck()
                        }
                      }
                      stage('Upload to Artifactory' ){
                            steps{
                                withMaven(maven: 'maven_3.8'){
                                withCredentials([file(credentialsId: 'mvn_settings_abreham', variable: 'mvn_settings')]) {
                                    sh 'mvn deploy -s $mvn_settings'
                                     }
                                }
                            }
                      }
                      stage('Upload to Artifactory configFile'){
                           steps{
                               withMaven(maven: 'maven_3.8'){
                                       configFileProvider([configFile(fileId: 'artifactory-settings', targetLocation: 'mvn_settings_managed', variable: 'mvn_settings_managed')]) {
                                            sh 'mvn deploy -s $mvn_settings_managed'
                                       }
                              }
                          }
                    }
                    stage('Deploy to Dev'){
                    when {
                        expression{
                            env.BRANCH_NAME == 'main'

                        }

                    }
                        steps{
                            script{
                                def remote = [name: 'Dev' , host:'209.97.146.162' , allowAnyHosts: true]
                                withCredentials([usernamePassword(credentialsId: 'server-ssh-pw', passwordVariable: 'password', usernameVariable: 'username')]) {
                                    remote.user = username
                                    remote.password = password
                                    sshPut remote: remote, from:  'ibt-maven/1.7-SNAPSHOT.jar', into: '/opt/tomcat/apps'
                                }
                            }
                        }
                    }
                }
}